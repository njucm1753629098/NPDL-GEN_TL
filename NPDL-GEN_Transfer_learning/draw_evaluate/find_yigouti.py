# coding:latin-1
from rdkit import Chem
from rdkit.Chem import rdMolDescriptors
from itertools import combinations
import pandas as pd

def is_enantiomer(mol1, mol2):
    """判断两分子是否为对映异构体"""
    
    # 判断两分子的分子式是否相同
    formula1 = rdMolDescriptors.CalcMolFormula(mol1)
    formula2 = rdMolDescriptors.CalcMolFormula(mol2)
    
    if formula1 != formula2:
        return False # 如果分子式不同，就不是对映异构体
    
    # 查找手性中心
    conf1 = Chem.FindMolChiralCenters(mol1, includeUnassigned=True) 
    # 计算手性中心数，并返回位置和(索引)和手性标志，分子 1 的手性中心：[(1, 'S')]，分子 2 的手性中心：[(1, 'R')]，对于对映异构体，手性标志 'S' 和 'R' 是相反的，因此符合条件。对映异构体必须在相同的位置上具有手性中心
    conf2 = Chem.FindMolChiralCenters(mol2, includeUnassigned=True)
    
    # 判断两分子是否含有手性中心
    if not conf1 or not conf2:
        return False  # 如果其中任何一个分子没有手性中心，则不是对映异构体
    
    # 判断两分子手性中心数量是否相同
    if len(conf1) != len(conf2):
        return False  # 手性中心数量不同，肯定不是对映异构体
    
    # 检查手性中心是否完全相反
    for (idx1, chiral1), (idx2, chiral2) in zip(conf1, conf2):
        if idx1 != idx2 or chiral1 == chiral2:  # 手性中心相同或位置不匹配
            return False
    return True

def is_diastereomer(mol1, mol2):
    """判断两分子是否为非对映异构体"""
    
    # 判断两分子的分子式是否相同
    formula1 = rdMolDescriptors.CalcMolFormula(mol1)
    formula2 = rdMolDescriptors.CalcMolFormula(mol2)
    
    if formula1 != formula2:
        return False # 如果分子式不同，就不是非对映异构体
        
    conf1 = Chem.FindMolChiralCenters(mol1, includeUnassigned=True)
    conf2 = Chem.FindMolChiralCenters(mol2, includeUnassigned=True)
    
    # 判断两分子是否含有手性中心
    if not conf1 or not conf2:
        return False  # 如果其中任何一个分子没有手性中心，则不是非对映异构体
        
    if len(conf1) != len(conf2):
        return False  # 手性中心数量不同，不可能是非对映异构体
    
    # 检查部分手性中心是否相同，部分相反
    diff_count = sum(1 for (idx1, chiral1), (idx2, chiral2) in zip(conf1, conf2) if chiral1 != chiral2)
    return 0 < diff_count < len(conf1)

def find_stereoisomers(smiles_list):
    """寻找对映异构体和非对映异构体"""
    enantiomers = []
    diastereomers = []
    
    for smi1, smi2 in combinations(smiles_list, 2):  # 两两组合
        mol1 = Chem.MolFromSmiles(smi1)
        mol2 = Chem.MolFromSmiles(smi2)
        
        if mol1 and mol2:  # 确保分子合法
            if is_enantiomer(mol1, mol2):
                enantiomers.append((smi1, smi2))
            elif is_diastereomer(mol1, mol2):
                diastereomers.append((smi1, smi2))
    
    return enantiomers, diastereomers
    
def save_results_to_csv(enantiomers, diastereomers, output_file):
    """保存结果到 CSV 文件，确保 SMILES 排序并去重"""
    data_set = set()  # 使用集合去重
    for smi1, smi2 in enantiomers:
        data_set.add(("Enantiomer", *sorted([smi1, smi2])))
    for smi1, smi2 in diastereomers:
        data_set.add(("Diastereomer", *sorted([smi1, smi2])))
    
    # 转换为列表并保存到 CSV
    df = pd.DataFrame(list(data_set), columns=["Type", "SMILES_1", "SMILES_2"])
    df.to_csv(output_file, index=False)
    print(f"Results saved to {output_file}")
    
if __name__ == "__main__":
    # 从文件中读取 SMILES 列表
    input_file = "autodl-tmp/code_final/datasets/zuhe/train_merged_smiles_with_property_scaffold_3000.txt"
    output_file = "autodl-tmp/code_final/yigouti_trainset.csv"
    
    with open(input_file, "r") as f:
        smiles_list = [line.strip() for line in f.readlines()]
    
    # 找到对映异构体和非对映异构体
    enantiomers, diastereomers = find_stereoisomers(smiles_list)
    
    # 保存结果到 CSV 文件
    save_results_to_csv(enantiomers, diastereomers, output_file)
    
    

